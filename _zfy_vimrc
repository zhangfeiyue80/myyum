
" cmd vi tabs echo number
set tabline=%!MyTabLine()  " custom tab pages line
function MyTabLine()
    let s = '' " complete tabline goes here
    " loop through each tab page
    for t in range(tabpagenr('$'))
        " set highlight
        if t + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        " set the tab page number (for mouse clicks)
        let s .= '%' . (t + 1) . 'T'
        let s .= ' '
        " set page number string
        let s .= t + 1 . ' '
        " get buffer names and statuses
        let n = ''      "temp string for buffer names while we loop and check buftype
        let m = 0       " &modified counter
        let bc = len(tabpagebuflist(t + 1))     "counter to avoid last ' '
        " loop through each buffer in a tab
        for b in tabpagebuflist(t + 1)
            " buffer types: quickfix gets a [Q], help gets [H]{base fname}
            " others get 1dir/2dir/3dir/fname shortened to 1/2/3/fname
            if getbufvar( b, "&buftype" ) == 'help'
                let n .= '[H]' . fnamemodify( bufname(b), ':t:s/.txt$//' )
            elseif getbufvar( b, "&buftype" ) == 'quickfix'
                let n .= '[Q]'
            else
                let n .= pathshorten(bufname(b))
            endif
            " check and ++ tab's &modified count
            if getbufvar( b, "&modified" )
                let m += 1
            endif
            " no final ' ' added...formatting looks better done later
            if bc > 1
                let n .= ' '
            endif
            let bc -= 1
        endfor
        " add modified label [n+] where n pages in tab are modified
        if m > 0
            let s .= '[' . m . '+]'
        endif
        " select the highlighting for the buffer names
        " my default highlighting only underlines the active tab
        " buffer names.
        if t + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        " add buffer names
        if n == ''
            let s.= '[New]'
        else
            let s .= n
        endif
        " switch to no underlining and add final space to buffer list
        let s .= ' '
    endfor
    " after the last tab fill with TabLineFill and reset tab page nr
    let s .= '%#TabLineFill#%T'
    " right-align the label to close the current tab page
    if tabpagenr('$') > 1
        let s .= '%=%#TabLineFill#999Xclose'
    endif
    return s
endfunction

" gui vi tabs echo number
function GuiTabLabel()
  let label = ''
  let bufnrlist = tabpagebuflist(v:lnum)

  " Add '+' if one of the buffers in the tab page is modified
  for bufnr in bufnrlist
    if getbufvar(bufnr, "&modified")
      let label = '+'
      break
    endif
  endfor

  " Append the number of windows in the tab page if more than one
  "let wincount = tabpagewinnr(v:lnum, '$')
  let pagecount = tabpagenr()
  "if wincount > 1
  "  let label .= wincount
     let label .= pagecount
  "endif
  if label != ''
    let label .= ' '
  endif

  " Append the buffer name
  return label . bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
endfunction

set guitablabel=%{GuiTabLabel()}
"set guitablabel=%N\ %f

" gvim 启动最大化
"au GUIEnter * simalt ~x
autocmd GUIEnter * simalt ~x

" 快速切换最近标签页
autocmd TabLeave * let g:lastTabNr = tabpagenr()
nnoremap <leader>t :exec "tabnext ".g:lastTabNr<CR>

syntax on
set ruler

" 重新映射windows环境下Ctrl+V
if has("win32")
	"vmap <C-c> "+yi
	vmap <C-c> "+y
	vmap <C-x> "+c
	vmap <C-v> c<ESC>"+p
	imap <C-v> <ESC>"+pa
endif

" 解决中文乱码
"set fileencodings=utf-8,chinese,cp936,ucs-bom
"set guioptions=egmrLT
"set guioptions=off
set encoding=utf-8
"set guioptions=egmrL
"set guioptions=egm
set guioptions=eg
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

" 设置字体
"set guifont=Monaco:h9:cANSI:qDRAFT
"set guifont=YaHei_Consolas_Hybrid:h10:cANSI:qDRAFT
"set guifont=JetBrains_Mono:h8:b:cANSI:qDRAFT
"set guifont=JetBrains_Mono:h7:cANSI:qDRAFT
set guifont=JetBrains_Mono_NL:h9:cANSI:qDRAFT

" 设置主题
colorscheme desert

" set column highlight
"set cursorcolumn

" set line highlight
set cursorline
"highlight CursorLine   cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE
"highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE

" vim python support
let $PYTHONPATH = "D:\python-3.7.7"

"gtags 设置项
set cscopetag " 使用 cscope 作为 tags 命令
set cscopeprg=gtags-cscope " 使用 gtags-cscope 代替 cscope
let GtagsCscope_Auto_Load = 1
let CtagsCscope_Auto_Map = 1
let GtagsCscope_Quiet = 1
let gtags_file=findfile("GTAGS", ";") "查找 gtags 文件
if !empty(gtags_file)
    exe "cs add" gtags_file
endif

" set ctags
set ts=4
set sw=4
set tags=./.tags;,.tags
set expandtab

" status line
set statusline=\%<%.50F\ %m          "显示文件名和文件路径 (%<应该可以去掉)
set statusline+=%=\[ft=%Y]%r%h%w\ %*        "显示文件类型及文件状态
set statusline+=\[ff=%{&ff}]\ [fenc=%{&fenc}]\ %*   "显示文件编码类型
set statusline+=\ row:%l/%L\ col:%c\ %*   "显示光标所在行和列
set statusline+=\%3p%%\%*            "显示光标前文本所占总文本的比例
set laststatus=2

"" Taglist set
""let Tlist_Auto_Open=1
"let Tlist_Ctags_Cmd = 'd:\bat\ctags.exe'
"let Tlist_Show_One_File = 1
"let Tlist_Exit_OnlyWindow = 1

" tagbar set
" nmap <silent> <F4> :TagbarToggle<CR>
let g:tagbar_ctags_bin = 'd:\bat\ctags.exe'
let g:tagbar_width = 30
let g:tagbar_left = 1


" cscope set 
" ==============================================================
"let CSCOPE_DB = "/storage/emulated/0/work/newSvn/cscope.out"
"let CSCOPE_DB = ".\cscope.out"
"let CSCOPE_DB = ""

set cscopequickfix=s-,c-,d-,i-,t-,e-,a-,g-
"set cscopequickfix=" "

"if has("cscope")
"	"set csprg=d:\bat\cscope.exe
"	set csto=0
"	set cst
"	"set nocsverb
"	" add any database in current directory
"	if filereadable("cscope.out")
"	    cs add cscope.out
"	" else add database pointed to by environment
"	elseif CSCOPE_DB != ""
"	    execute "cs add ". CSCOPE_DB
"	endif
"	set csverb
"endif

"nmap <C-\>s :scs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>g :scs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>c :scs find c <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>t :scs find t <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>e :scs find e <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>f :scs find f <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>i :scs find i <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>d :scs find d <C-R>=expand("<cword>")<CR><CR>
 
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>i :cs find i <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

 
nmap <C-\>vs :vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>vg :vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>vc :vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>vt :vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>ve :vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>vf :vert scs find f <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>vi :vert scs find i <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>vd :vert scs find d <C-R>=expand("<cword>")<CR><CR>

nmap <C-\>gg :Gtags <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>gr :Gtags -r <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>gc :GtagsCuorsor <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>gp :Gtags -P <C-R>=expand("<cword>")<CR><CR>


" LeaderFunction
nmap \F :LeaderfFunction!<CR>
nmap \Fs :LeaderfFunction<CR>

" don't show the help in normal mode
let g:Lf_HideHelp = 1
let g:Lf_UseCache = 0
let g:Lf_UseVersionControlTool = 0
let g:Lf_IgnoreCurrentBufferName = 1
" popup mode
"let g:Lf_WindowPosition = 'popup'
"let g:Lf_PreviewInPopup = 1
"let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
"let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }

let g:Lf_ShortcutF = "<leader>ff"
noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>

noremap <C-B> :<C-U><C-R>=printf("Leaderf! rg --current-buffer -e %s ", expand("<cword>"))<CR>
noremap <C-F> :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR>
" search visually selected text literally
xnoremap gf :<C-U><C-R>=printf("Leaderf! rg -F -e %s ", leaderf#Rg#visual())<CR>
noremap go :<C-U>Leaderf! rg --recall<CR>

" should use `Leaderf gtags --update` first
let g:Lf_GtagsAutoGenerate = 0
let g:Lf_Gtagslabel = 'native-pygments'
noremap <leader>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>fo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
noremap <leader>fn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
noremap <leader>fp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>

source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
